#pragma kernel CSMain

 // Particle's data
struct Particle
{
	float3 position;
	float3 velocity;
	float life;
};

// Particle's data, shared with the shader
RWStructuredBuffer<Particle> particleBuffer;

// Variables set from the CPU 
float deltaTime;
float2 mousePosition;
float halfSize;

uint rng_state;

// http://www.reedbeta.com/blog/quick-and-easy-gpu-random-numbers-in-d3d11/
uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

float random(){
	//return pseudo-random number in the range [0-1]
	return float(rand_xorshift()) * (1.0 / 4294967296.0);
}

float3 random3(){
	//return pseudo-random float3 each component in the range [0-1]
	return float3(rand_xorshift(), rand_xorshift(), rand_xorshift()) * (1.0 / 4294967296.0);
}

[numthreads(256, 1, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	// subtract the life based on deltaTime
	particleBuffer[id.x].life -= deltaTime;

	float3 delta = float3(mousePosition.xy, 3) - particleBuffer[id.x].position;
	float3 dir = normalize(delta);

	particleBuffer[id.x].velocity += dir;
	particleBuffer[id.x].position += particleBuffer[id.x].velocity * deltaTime;

	if (particleBuffer[id.x].life < 0)
	{
		rng_state = id.x;
		float3 pos = normalize(random3()) * 3.8f;
		particleBuffer[id.x].position = float3(pos.x + mousePosition.x, pos.y + mousePosition.y, pos.z + 3.0);
		// reset the life of this particle
		particleBuffer[id.x].life = 4;
		particleBuffer[id.x].velocity = float3(0,0,0);
	}
}


