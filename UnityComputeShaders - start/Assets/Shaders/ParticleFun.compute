#pragma kernel CSParticle


// Variables set from the CPU 
float deltaTime;
float2 mousePosition;

float nrand(float2 uv)
{
	return frac(sin(dot(uv, float2(12.9898, 78.233))) * 43758.5453);
}

uint rng_state;

uint rand_xorshift()
{
	// Xorshift algorithm from George Marsaglia's paper
	rng_state ^= (rng_state << 13);
	rng_state ^= (rng_state >> 17);
	rng_state ^= (rng_state << 5);
	return rng_state;
}

float random(){
	//return pseudo-random number in the range [0-1]
	return float(rand_xorshift()) * (1.0 / 4294967296.0);
}

float3 random3(){
	//return pseudo-random float3 each component in the range [0-1]  
	return float3(rand_xorshift(), rand_xorshift(), rand_xorshift()) * (1.0 / 4294967296.0);
}

void respawn(uint id)
{
	rng_state = id;
	float3 pos = normalize(random3()) * 3.8f;
	//particleBuffer[id].position = float3(pos.x + mousePosition.x, pos.y + mousePosition.y, pos.z + 3.0);
	// reset the life of this particle
	//particleBuffer[id].life = 4;
	//particleBuffer[id].velocity = float3(0,0,0);
}

[numthreads(256, 1, 1)]
void CSParticle(uint3 id : SV_DispatchThreadID)
{
	
}